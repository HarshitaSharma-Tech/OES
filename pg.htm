<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Fixed Income Markets – Order Execution System (OES)</title>
  <style>
    :root{
      --bg:#0f1320; --panel:#141a2a; --muted:#7a86a1; --text:#e8ecf7; --pri:#4f8cff; --pri-2:#9ac1ff;
      --good:#19c37d; --bad:#ff5a5f; --warn:#ffb020;
    }
    *{box-sizing:border-box}
    html,body{height:100%}
    body{margin:0; font-family:Inter, ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial; background:linear-gradient(180deg, #0b1020, #0a0d17 40%, #0b0f1c); color:var(--text);}
    header{position:fixed; top:0; left:0; right:0; display:flex; align-items:center; justify-content:space-between; padding:10px 18px; background:rgba(10,14,24,0.7); backdrop-filter:saturate(140%) blur(10px); border-bottom:1px solid rgba(255,255,255,0.06); z-index:10}
    header .brand{display:flex; align-items:center; gap:10px; font-weight:700; letter-spacing:.3px}
    header .brand .dot{width:10px; height:10px; border-radius:50%; background:var(--pri); box-shadow:0 0 12px var(--pri)}
    header .title{font-size:14px; color:var(--muted)}
    .progress{display:flex; gap:6px; align-items:center}
    .step{width:10px; height:10px; border-radius:4px; background:#2a334a; transition:all .2s}
    .step.active{background:var(--pri)}
    .step.done{background:var(--pri-2)}

    main{height:100%; display:grid; place-items:center; padding:90px 16px 20px}
    .page{display:none; width:min(1200px, 96vw); background:var(--panel); border:1px solid rgba(255,255,255,0.06); border-radius:18px; padding:22px; box-shadow:0 20px 80px rgba(0,0,0,.35)}
    .page.active{display:block; animation:fade .25s ease}
    @keyframes fade{from{opacity:.3; transform:translateY(4px)} to{opacity:1; transform:none}}

    h2{margin:6px 0 12px; font-size:22px}
    h3{margin:20px 0 10px; font-size:16px; color:var(--pri-2)}
    p.muted{color:var(--muted); margin:0 0 14px}
    .grid{display:grid; gap:12px}
    .grid.cols-2{grid-template-columns:1.3fr 1fr}
    .grid.cols-3{grid-template-columns:repeat(3, 1fr)}

    .card{background:#0f1526; border:1px solid rgba(255,255,255,0.05); padding:14px; border-radius:14px}
    .toolbar{display:flex; gap:8px; align-items:center; justify-content:space-between; margin-bottom:10px}
    .left, .right{display:flex; gap:8px; align-items:center}

    input, select, button, textarea{background:#0c1222; color:var(--text); border:1px solid #202a44; border-radius:10px; padding:10px 12px; outline:none}
    input::placeholder, textarea::placeholder{color:#7380a0}
    button{cursor:pointer}
    button.primary{background:var(--pri); border-color:transparent; font-weight:600}
    button.ghost{background:#0c122200}
    button.warning{background:var(--warn); border-color:transparent}
    button.good{background:var(--good); border-color:transparent}
    button.bad{background:var(--bad); border-color:transparent}

    table{width:100%; border-collapse:collapse; font-size:13px}
    th,td{padding:10px 8px; border-bottom:1px dashed rgba(255,255,255,0.06); text-align:left; vertical-align:top}
    th{position:sticky; top:0; background:#0f1526; z-index:1}
    tr:hover td{background:rgba(79,140,255,0.06)}

    .pill{padding:4px 8px; border-radius:999px; font-size:12px; display:inline-block; border:1px solid rgba(255,255,255,0.08)}
    .pill.good{background:rgba(25,195,125,.15); border-color:rgba(25,195,125,.45)}
    .pill.bad{background:rgba(255,90,95,.15); border-color:rgba(255,90,95,.45)}

    footer.nav{display:flex; justify-content:center; gap:10px; margin:16px 0 6px}
    .nav-btn{padding:10px 16px; border-radius:12px}

    .hint{color:var(--muted); font-size:12px}
    .kbd{font-family:ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace; border:1px solid #2a3350; background:#0c1222; padding:2px 6px; border-radius:6px}
    .badge{font-size:11px; padding:4px 8px; border-radius:999px; background:#111933; border:1px solid #263056}

    .flex{display:flex; gap:10px; align-items:center}
    .spacer{flex:1}
    .sr-only{position:absolute; left:-10000px}
  </style>
</head>
<body>
  <header>
    <div class="brand">
      <span class="dot" aria-hidden="true"></span>
      OES • Fixed Income Markets
      <span class="title">— One requirement per page</span>
    </div>
    <div class="progress" id="progress"></div>
    <div class="hint">Navigate: <span class="kbd">←</span> <span class="kbd">→</span> or use buttons</div>
  </header>

  <main>
    <!-- ===================== Requirement 1: Market Watch ===================== -->
    <section class="page active" data-title="Requirement 1: Market Watch Screen">
      <h2>Requirement 1: Market Watch Screen</h2>
      <p class="muted">Displays comprehensive information for all financial instruments (bonds). Includes Ticker, Bid/Ask, YTM, Current Yield, Face Value, Days to Maturity, Modified Duration, Characteristics, and Important Dates.</p>

      <div class="card">
        <div class="toolbar">
          <div class="left">
            <label class="badge">Filters</label>
            <input id="searchBond" placeholder="Search ticker / issuer / ISIN" />
            <select id="maturityFilter">
              <option value="all">All maturities</option>
              <option value="lt1">&lt; 1y</option>
              <option value="1to5">1–5y</option>
              <option value="gt5">&gt; 5y</option>
            </select>
          </div>
          <div class="right">
            <button class="ghost" id="resetFilters">Reset</button>
            <button class="primary" id="refreshMarket">Refresh Prices</button>
          </div>
        </div>
        <div class="table-wrap">
          <table id="marketTable" aria-label="Market watch table">
            <thead>
              <tr>
                <th>Ticker</th>
                <th>ISIN</th>
                <th>Issuer</th>
                <th>Coupon</th>
                <th>Bid</th>
                <th>Ask</th>
                <th>YTM</th>
                <th>Current Yield</th>
                <th>Face Value</th>
                <th>Days to Maturity</th>
                <th>Modified Duration</th>
                <th>Bond Characteristics</th>
                <th>Important Dates</th>
              </tr>
            </thead>
            <tbody></tbody>
          </table>
        </div>
      </div>
      <div class="hint" style="margin-top:8px">Note: YTM and Modified Duration here are simplified for demo purposes.</div>
    </section>

    <!-- ===================== Requirement 2: Order Execution ===================== -->
    <section class="page" data-title="Requirement 2: Order Execution Window">
      <h2>Requirement 2: Order Execution Window</h2>
      <p class="muted">Place, modify, and manage Buy/Sell orders; specify Disclosed Quantity, Stop Loss (Trigger), and Conditional Orders.</p>

      <div class="grid cols-2">
        <div class="card">
          <h3>New / Modify Order</h3>
          <form id="orderForm" autocomplete="off">
            <div class="grid cols-3">
              <div>
                <label>Ticker</label>
                <select id="orderTicker"></select>
              </div>
              <div>
                <label>Side</label>
                <select id="orderSide">
                  <option>Buy</option>
                  <option>Sell</option>
                </select>
              </div>
              <div>
                <label>Order Type</label>
                <select id="orderType">
                  <option>Limit</option>
                  <option>Market</option>
                  <option>Stop</option>
                  <option>Stop-Limit</option>
                </select>
              </div>
            </div>
            <div class="grid cols-3">
              <div>
                <label>Price</label>
                <input id="orderPrice" type="number" step="0.01" placeholder="e.g., 99.25" />
              </div>
              <div>
                <label>Quantity (Face)</label>
                <input id="orderQty" type="number" step="1" placeholder="e.g., 100" />
              </div>
              <div>
                <label>Disclosed Qty</label>
                <input id="orderDisclosed" type="number" step="1" placeholder="optional" />
              </div>
            </div>
            <div class="grid cols-3">
              <div>
                <label>Stop Loss (Trigger)</label>
                <input id="orderTrigger" type="number" step="0.01" placeholder="optional" />
              </div>
              <div>
                <label>Conditional</label>
                <select id="orderConditional">
                  <option value="none">None</option>
                  <option value="ioc">IOC</option>
                  <option value="fok">FOK</option>
                  <option value="gtd">GTD</option>
                </select>
              </div>
              <div>
                <label class="sr-only">Action</label>
                <div class="flex">
                  <button type="submit" class="primary">Submit</button>
                  <button type="button" id="resetOrder" class="ghost">Reset</button>
                </div>
              </div>
            </div>
          </form>
        </div>

        <div class="card">
          <h3>Live Orders</h3>
          <div class="toolbar">
            <span class="badge">Actions</span>
            <div class="spacer"></div>
            <button id="amendBtn" class="warning">Amend Selected</button>
            <button id="cancelBtn" class="bad">Cancel Selected</button>
          </div>
          <table id="ordersTable">
            <thead>
              <tr>
                <th></th>
                <th>Time</th>
                <th>Ticker</th>
                <th>Side</th>
                <th>Type</th>
                <th>Qty</th>
                <th>Disc</th>
                <th>Price</th>
                <th>Trigger</th>
                <th>Status</th>
              </tr>
            </thead>
            <tbody></tbody>
          </table>
        </div>
      </div>
    </section>

    <!-- ===================== Requirement 3: Trade Management ===================== -->
    <section class="page" data-title="Requirement 3: Trade Management Window">
      <h2>Requirement 3: Trade Management Window</h2>
      <p class="muted">Manage open trades, cancel existing orders, and amend executions. Demo view below lets you mark fills, amend, or cancel.</p>

      <div class="card">
        <div class="toolbar">
          <div class="left">
            <span class="badge">Open Trades</span>
          </div>
          <div class="right">
            <button id="markFilled" class="good">Mark as Filled</button>
            <button id="amendExec" class="warning">Amend Execution</button>
            <button id="cancelExec" class="bad">Cancel</button>
          </div>
        </div>
        <table id="tradesTable">
          <thead>
            <tr>
              <th></th>
              <th>Time</th>
              <th>Ticker</th>
              <th>Side</th>
              <th>Qty</th>
              <th>Avg Px</th>
              <th>Status</th>
            </tr>
          </thead>
          <tbody></tbody>
        </table>
      </div>
    </section>

    <!-- ===================== Requirement 4: Net Position ===================== -->
    <section class="page" data-title="Requirement 4: Net Position Window">
      <h2>Requirement 4: Net Position Window</h2>
      <p class="muted">Consolidated view with FIFO/LIFO weighted average, overall P&L, and MTM per asset.</p>

      <div class="card">
        <div class="toolbar">
          <div class="left">
            <label>Inventory Valuation</label>
            <select id="valuationMethod">
              <option value="FIFO">FIFO</option>
              <option value="LIFO">LIFO</option>
            </select>
          </div>
          <div class="right">
            <button id="recomputePnL" class="primary">Recompute P&amp;L</button>
          </div>
        </div>

        <table id="positionsTable">
          <thead>
            <tr>
              <th>Ticker</th>
              <th>Net Qty</th>
              <th>WAP (FIFO/LIFO)</th>
              <th>Last Price</th>
              <th>Unrealized P&amp;L</th>
              <th>MTM per Asset</th>
            </tr>
          </thead>
          <tbody></tbody>
          <tfoot>
            <tr>
              <th colspan="4" style="text-align:right">Overall P&amp;L</th>
              <th id="overallPnL" colspan="2">—</th>
            </tr>
          </tfoot>
        </table>
      </div>
    </section>
  </main>

  <footer class="nav">
    <button class="nav-btn" id="prev">◀ Previous</button>
    <button class="nav-btn primary" id="next">Next ▶</button>
  </footer>

  <script>
    // ---------- Demo Data (bonds & orders) ----------
    const bonds = [
      {
        ticker:"IN-GOV-24A", isin:"IN0000123456", issuer:"India GoI", coupon:7.18, face:100, 
        bid:99.45, ask:99.65, issue:"2022-01-15", maturity:"2026-01-15", modDuration:2.8, 
        characteristics:["Government","Fixed","Semi-annual"], dates:["Coupon: Jan 15, Jul 15","Call: —"]
      },
      {
        ticker:"US-TREA-30Y", isin:"US0000302025", issuer:"US Treasury", coupon:4.25, face:100,
        bid:96.10, ask:96.30, issue:"2020-08-15", maturity:"2050-08-15", modDuration:17.6,
        characteristics:["Sovereign","Fixed","Semi-annual"], dates:["Coupon: Feb 15, Aug 15","Call: —"]
      },
      {
        ticker:"RELI-25NCD", isin:"INE002A08012", issuer:"Reliance NCD", coupon:8.50, face:1000,
        bid:1012.00, ask:1014.50, issue:"2021-06-01", maturity:"2028-06-01", modDuration:4.9,
        characteristics:["Corporate","Fixed","Quarterly"], dates:["Coupon: Mar/Jun/Sep/Dec","Call: 2026-06-01"]
      },
      {
        ticker:"HDFC-27BOND", isin:"INE001A12345", issuer:"HDFC Ltd", coupon:7.85, face:1000,
        bid:995.25, ask:996.80, issue:"2022-04-01", maturity:"2027-04-01", modDuration:3.6,
        characteristics:["Corporate","Fixed","Annual"], dates:["Coupon: Apr 1","Put: 2026-04-01"]
      }
    ];

    // Simple helpers
    const fmt = (n, d=2) => (isNaN(n) || n===null)?"—":Number(n).toFixed(d);
    const daysBetween = (a,b)=> Math.round((new Date(b)-new Date(a))/86400000);
    const todayStr = new Date().toISOString().slice(0,10);

    function currentYield(coupon, price, face){
      const annualCoupon = face * (coupon/100);
      return (annualCoupon / price) * 100; // %
    }

    // Crude YTM approximation via current yield + linearity (demo only)
    function approxYTM(coupon, price, face, years){
      const cy = currentYield(coupon, price, face);
      const discount = ((face - price) / ((face + price)/2)) * (1/years) * 100; // rough
      return Math.max(0, cy + discount);
    }

    // ---------- Market Watch Rendering ----------
    const marketBody = document.querySelector('#marketTable tbody');
    function renderMarket(){
      const q = document.getElementById('searchBond').value.toLowerCase();
      const mf = document.getElementById('maturityFilter').value;
      marketBody.innerHTML = '';
      bonds.forEach(b=>{
        const mid = (b.bid + b.ask)/2;
        const daysToMat = daysBetween(todayStr, b.maturity);
        const years = Math.max(0.1, daysToMat/365);
        const ytm = approxYTM(b.coupon, mid, b.face, years);
        const cy = currentYield(b.coupon, mid, b.face);

        // Filters
        const matchQ = [b.ticker,b.issuer,b.isin].some(x=>x.toLowerCase().includes(q));
        let matchM = true;
        if(mf==='lt1') matchM = daysToMat < 365;
        if(mf==='1to5') matchM = daysToMat >= 365 && daysToMat <= 1825;
        if(mf==='gt5') matchM = daysToMat > 1825;
        if(!(matchQ && matchM)) return;

        const tr = document.createElement('tr');
        tr.innerHTML = `
          <td>${b.ticker}</td>
          <td>${b.isin}</td>
          <td>${b.issuer}</td>
          <td>${fmt(b.coupon,2)}%</td>
          <td>${fmt(b.bid)}</td>
          <td>${fmt(b.ask)}</td>
          <td>${fmt(ytm,2)}%</td>
          <td>${fmt(cy,2)}%</td>
          <td>${fmt(b.face,0)}</td>
          <td>${daysToMat}</td>
          <td>${fmt(b.modDuration,2)}</td>
          <td>${b.characteristics.map(c=>`<span class="pill">${c}</span>`).join(' ')}</td>
          <td>${b.dates.map(d=>`<div>${d}</div>`).join('')}</td>
        `;
        marketBody.appendChild(tr);
      });
    }

    document.getElementById('searchBond').addEventListener('input', renderMarket);
    document.getElementById('maturityFilter').addEventListener('change', renderMarket);
    document.getElementById('resetFilters').addEventListener('click', ()=>{
      document.getElementById('searchBond').value='';
      document.getElementById('maturityFilter').value='all';
      renderMarket();
    });
    document.getElementById('refreshMarket').addEventListener('click', ()=>{
      // Simulate a tiny price move
      bonds.forEach(b=>{ const d=(Math.random()-.5)*0.4; b.bid = Math.max(80, b.bid+d); b.ask = Math.max(b.bid+0.1, b.ask+d); });
      renderMarket();
      recomputePositions();
    });

    // ---------- Order Execution ----------
    const orderTicker = document.getElementById('orderTicker');
    bonds.forEach(b=>{ const o=document.createElement('option'); o.value=b.ticker; o.textContent=b.ticker; orderTicker.appendChild(o); });

    const orders = []; // live orders
    const trades = []; // executions (open trades for Mgmt)

    function renderOrders(){
      const tbody = document.querySelector('#ordersTable tbody');
      tbody.innerHTML = '';
      orders.forEach((o, idx)=>{
        const tr = document.createElement('tr');
        tr.innerHTML = `
          <td><input type="radio" name="orderSel" value="${idx}"></td>
          <td>${new Date(o.time).toLocaleTimeString()}</td>
          <td>${o.ticker}</td>
          <td>${o.side}</td>
          <td>${o.type}</td>
          <td>${o.qty}</td>
          <td>${o.disclosed||'—'}</td>
          <td>${o.price? fmt(o.price): '—'}</td>
          <td>${o.trigger||'—'}</td>
          <td><span class="pill ${o.status==='Working'?'':'good'}">${o.status}</span></td>`;
        tbody.appendChild(tr);
      });
    }

    function renderTrades(){
      const tbody = document.querySelector('#tradesTable tbody');
      tbody.innerHTML = '';
      trades.forEach((t, idx)=>{
        const tr = document.createElement('tr');
        tr.innerHTML = `
          <td><input type="radio" name="tradeSel" value="${idx}"></td>
          <td>${new Date(t.time).toLocaleTimeString()}</td>
          <td>${t.ticker}</td>
          <td>${t.side}</td>
          <td>${t.qty}</td>
          <td>${fmt(t.avgPx)}</td>
          <td><span class="pill ${t.status==='Open'?'':'good'}">${t.status}</span></td>`;
        tbody.appendChild(tr);
      });
    }

    document.getElementById('orderForm').addEventListener('submit', (e)=>{
      e.preventDefault();
      const o = {
        time: Date.now(),
        ticker: orderTicker.value,
        side: document.getElementById('orderSide').value,
        type: document.getElementById('orderType').value,
        price: parseFloat(document.getElementById('orderPrice').value)||null,
        qty: parseInt(document.getElementById('orderQty').value||'0',10),
        disclosed: parseInt(document.getElementById('orderDisclosed').value||'')||null,
        trigger: parseFloat(document.getElementById('orderTrigger').value)||null,
        status: 'Working'
      };
      if(!o.qty || (o.type!=='Market' && !o.price)) { alert('Please enter Quantity and Price (unless Market).'); return; }
      orders.push(o);
      // Simulate immediate partial/complete fill into trades
      const fillQty = Math.max(1, Math.round(o.qty * (0.5 + Math.random()*0.5)));
      const ref = bonds.find(b=>b.ticker===o.ticker);
      const execPx = o.type==='Market' ? ((o.side==='Buy')? ref.ask : ref.bid) : o.price;
      trades.push({ time: o.time, ticker:o.ticker, side:o.side, qty:fillQty, avgPx:execPx, status:'Open' });
      renderOrders(); renderTrades(); recomputePositions();
    });
    document.getElementById('resetOrder').addEventListener('click', ()=> document.getElementById('orderForm').reset());

    document.getElementById('cancelBtn').addEventListener('click', ()=>{
      const sel = document.querySelector('input[name="orderSel"]:checked');
      if(!sel) return alert('Select an order.');
      orders[sel.value].status = 'Cancelled';
      renderOrders();
    });

    document.getElementById('amendBtn').addEventListener('click', ()=>{
      const sel = document.querySelector('input[name="orderSel"]:checked');
      if(!sel) return alert('Select an order.');
      const o = orders[sel.value];
      const np = parseFloat(prompt('New price?', o.price||''));
      if(!isNaN(np)) o.price = np;
      renderOrders();
    });

    // Trade Mgmt actions
    document.getElementById('markFilled').addEventListener('click', ()=>{
      const sel = document.querySelector('input[name="tradeSel"]:checked');
      if(!sel) return alert('Select a trade.');
      trades[sel.value].status = 'Filled';
      renderTrades(); recomputePositions();
    });
    document.getElementById('amendExec').addEventListener('click', ()=>{
      const sel = document.querySelector('input[name="tradeSel"]:checked');
      if(!sel) return alert('Select a trade.');
      const t = trades[sel.value];
      const nq = parseInt(prompt('Amend quantity', t.qty),10);
      const np = parseFloat(prompt('Amend avg price', t.avgPx));
      if(!isNaN(nq)) t.qty = nq;
      if(!isNaN(np)) t.avgPx = np;
      renderTrades(); recomputePositions();
    });
    document.getElementById('cancelExec').addEventListener('click', ()=>{
      const sel = document.querySelector('input[name="tradeSel"]:checked');
      if(!sel) return alert('Select a trade.');
      trades.splice(sel.value,1);
      renderTrades(); recomputePositions();
    });

    // ---------- Net Position & PnL ----------
    function inventoryLayersFor(ticker){
      // Build layers from filled trades only
      const layers = [];
      trades.filter(t=>t.ticker===ticker && t.status!=='Cancelled').forEach(t=>{
        const q = t.side==='Buy' ? t.qty : -t.qty;
        layers.push({qty:q, price:t.avgPx, time:t.time});
      });
      return layers;
    }

    function computeWAPAndPnL(method){
      const positions = {};
      bonds.forEach(b=>positions[b.ticker] = {ticker:b.ticker, last: (b.bid+b.ask)/2, net:0, wap:0});

      bonds.forEach(b=>{
        const layers = inventoryLayersFor(b.ticker);
        // Separate buys and sells
        const buys = layers.filter(l=>l.qty>0);
        const sells = layers.filter(l=>l.qty<0).map(l=>({qty:-l.qty, price:l.price, time:l.time}));
        // Sort layers by time
        buys.sort((a,b)=> a.time-b.time);
        sells.sort((a,b)=> a.time-b.time);
        if(method==='LIFO'){ buys.reverse(); sells.reverse(); }

        // Apply matching to compute remaining inventory & WAP
        let remain = [];
        buys.forEach(bu=> remain.push({...bu}));
        sells.forEach(se=>{
          let q = se.qty;
          while(q>0 && remain.length){
            let layer = remain[0];
            const use = Math.min(q, layer.qty);
            layer.qty -= use;
            q -= use;
            if(layer.qty===0) remain.shift();
          }
        });
        // Remaining inventory defines net qty and WAP
        const netQty = remain.reduce((s,l)=>s+l.qty,0);
        const cost = remain.reduce((s,l)=>s+l.qty*l.price,0);
        const wap = netQty? cost/netQty : 0;
        positions[b.ticker].net = netQty;
        positions[b.ticker].wap = wap;
      });

      // Compute P&L
      let overall = 0;
      const rows = Object.values(positions).map(p=>{
        const mtm = (p.last - p.wap) * p.net;
        overall += mtm;
        return {...p, mtm};
      });
      return {rows, overall};
    }

    function renderPositions(){
      const method = document.getElementById('valuationMethod').value;
      const {rows, overall} = computeWAPAndPnL(method);
      const tbody = document.querySelector('#positionsTable tbody');
      tbody.innerHTML='';
      rows.forEach(r=>{
        const tr=document.createElement('tr');
        const cls = r.mtm>=0? 'good':'bad';
        tr.innerHTML = `
          <td>${r.ticker}</td>
          <td>${r.net}</td>
          <td>${r.net? fmt(r.wap): '—'}</td>
          <td>${fmt(r.last)}</td>
          <td><span class="pill ${cls}">${fmt(r.mtm)}</span></td>
          <td>${r.net? fmt(r.mtm/Math.abs(r.net)): '—'}</td>`;
        tbody.appendChild(tr);
      });
      const el = document.getElementById('overallPnL');
      el.textContent = (overall>=0? '+':'') + fmt(overall);
      el.style.color = overall>=0? 'var(--good)':'var(--bad)';
    }

    function recomputePositions(){ renderPositions(); }
    document.getElementById('valuationMethod').addEventListener('change', recomputePositions);
    document.getElementById('recomputePnL').addEventListener('click', recomputePositions);

    // ---------- Paging (one requirement per page) ----------
    const pages = Array.from(document.querySelectorAll('.page'));
    let idx = 0;
    const prevBtn = document.getElementById('prev');
    const nextBtn = document.getElementById('next');
    const progress = document.getElementById('progress');

    function renderProgress(){
      progress.innerHTML = '';
      pages.forEach((p,i)=>{
        const dot = document.createElement('div');
        dot.className = 'step' + (i===idx? ' active': i<idx? ' done':'');
        dot.title = p.dataset.title || `Page ${i+1}`;
        dot.addEventListener('click', ()=>{ idx=i; showPage(); });
        progress.appendChild(dot);
      });
    }

    function showPage(){
      pages.forEach((p,i)=> p.classList.toggle('active', i===idx));
      prevBtn.disabled = idx===0; nextBtn.disabled = idx===pages.length-1;
      renderProgress();
    }

    prevBtn.addEventListener('click', ()=>{ if(idx>0){ idx--; showPage(); } });
    nextBtn.addEventListener('click', ()=>{ if(idx<pages.length-1){ idx++; showPage(); } });
    window.addEventListener('keydown', (e)=>{
      if(e.key==='ArrowRight') nextBtn.click();
      if(e.key==='ArrowLeft') prevBtn.click();
    });

    // ---------- Initialize ----------
    renderMarket();
    renderOrders();
    renderTrades();
    renderPositions();
    renderProgress();
  </script>
</body>
</html>
